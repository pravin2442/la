
# 1) Ensemble Models – Classification (Iris dataset)

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.metrics import accuracy_score, classification_report

iris = load_iris()
X, y = iris.data, iris.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
rf_predictions = rf_model.predict(X_test)
print("Random Forest Classifier Results")
print("Accuracy:", accuracy_score(y_test, rf_predictions))
print("Classification Report:\n", classification_report(y_test, rf_predictions))

ada_model = AdaBoostClassifier(n_estimators=100, random_state=42)
ada_model.fit(X_train, y_train)
ada_predictions = ada_model.predict(X_test)
print("\nAdaBoost Classifier Results")
print("Accuracy:", accuracy_score(y_test, ada_predictions))
print("Classification Report:\n", classification_report(y_test, ada_predictions))

# 2) Ensemble Models – Regression (California Housing dataset)

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor
from sklearn.metrics import mean_squared_error, r2_score

data = fetch_california_housing()
X, y = data.data, data.target
print("Feature names (California Housing Dataset):")
for i, feature in enumerate(data.feature_names):
    print(f"{i+1}. {feature}")

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

rf_regressor = RandomForestRegressor(n_estimators=100, random_state=42)
rf_regressor.fit(X_train, y_train)
rf_predictions = rf_regressor.predict(X_test)
print("Random Forest Regressor Results")
print("Mean Squared Error:", mean_squared_error(y_test, rf_predictions))
print("R² Score:", r2_score(y_test, rf_predictions))

ada_regressor = AdaBoostRegressor(n_estimators=100, random_state=42)
ada_regressor.fit(X_train, y_train)
ada_predictions = ada_regressor.predict(X_test)
print("\nAdaBoost Regressor Results")
print("Mean Squared Error:", mean_squared_error(y_test, ada_predictions))
print("R² Score:", r2_score(y_test, ada_predictions))

print("\nEnter values to predict house price (use realistic values):")
user_input = []
for feature in data.feature_names:
    value = float(input(f"Enter value for {feature}: "))
    user_input.append(value)
user_input = np.array(user_input).reshape(1, -1)
rf_user_pred = rf_regressor.predict(user_input)[0]
ada_user_pred = ada_regressor.predict(user_input)[0]
print("\nPredicted Median House Value (in $100,000s):")
print(f"Random Forest Prediction: {rf_user_pred:.3f}")
print(f"AdaBoost Prediction: {ada_user_pred:.3f}")

plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
plt.scatter(y_test, rf_predictions, alpha=0.5, color='green')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Random Forest Regressor')

plt.subplot(1,2,2)
plt.scatter(y_test, ada_predictions, alpha=0.5, color='blue')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('AdaBoost Regressor')

plt.tight_layout()
plt.show()
